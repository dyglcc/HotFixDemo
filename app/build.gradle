apply plugin: 'com.android.application'

ext {
    verName = '1.3.6'
    appName = "testHotfix"
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'

    signingConfigs { //gradle assembleRelease
        release {
            storeFile file("/Users/dongyuangui/GITHUB/HotFixDemo/app/testjiagu.jks")
            storePassword "111111"
            keyAlias "key0"
            keyPassword "111111"
        }
    }
    defaultConfig {
        applicationId "hotfix.sample.com"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName project.ext.verName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //--------------------
        /**
         * you can use multiDex and install it in your ApplicationLifeCycle implement
         */
        multiDexEnabled true
        /**
         * buildConfig can change during patch!
         * we can use the newly value when patch
         */
        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
//        buildConfigField "String", "MESSAGE", "\"I am the patch apk\""
        /**
         * client version would update with patch
         * so we can get the newly git version easily!
         */
        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
        buildConfigField "String", "PLATFORM", "\"all\""


    }
    buildTypes {
        release {
//            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            applicationVariants.all { variant ->
//                variant.outputs.each { output ->
//                    def outputFile = output.outputFile
//                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                        // 输出apk名称为appname_v1.0_2015-09-15_09-57-58_wandoujia.apk
//                        // 下面的appname改为你自己的app name
//                        def flavorName = variant.productFlavors[0] == null ? '' : variant.productFlavors[0].name
//                        def fileName = "${project.ext.appName}_v${defaultConfig.versionName}_${releaseTime()}_${flavorName}.apk"
//                        output.outputFile = new File(outputFile.parent, fileName)
//                    }
//                }
//            }
        }
    }

//    // 友盟多渠道打包
//    productFlavors {
//        xiaomi {
//            def channel = "xiaomi"
////            tinkerId = channel + "_" + getTinkerIdValue();
//            buildConfigField "String", "TINKER_ID", "\"${getTinkerId(channel)}\""
//            manifestPlaceholders = [RELEASE_CHANNEL_VALUE: channel]
//        }
//        qihoo {
//            def channel = "qihoo"
//            buildConfigField "String", "TINKER_ID", "\"${getTinkerId(channel)}\""
//            manifestPlaceholders = [RELEASE_CHANNEL_VALUE: channel]
//        }
//        baidu {
//            def channel = "baidu"
//            buildConfigField "String", "TINKER_ID", "\"${getTinkerId(channel)}\""
//            manifestPlaceholders = [RELEASE_CHANNEL_VALUE: channel]
//        }
//        wandoujia {
//            def channel = "wandoujia"
//            buildConfigField "String", "TINKER_ID", "\"${getTinkerId(channel)}\""
//            manifestPlaceholders = [RELEASE_CHANNEL_VALUE: channel]
//        }
//        qq {
//            def channel = "qq"
//            buildConfigField "String", "TINKER_ID", "\"${getTinkerId(channel)}\""
//            manifestPlaceholders = [RELEASE_CHANNEL_VALUE: channel]
//        }
//    }

}
def gitSha() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}
def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.1.0'
    testCompile 'junit:junit:4.12'
    //optional, help to generate the final application
    provided 'com.tencent.tinker:tinker-android-anno:1.8.1'
    //tinker's main Android lib
    compile 'com.tencent.tinker:tinker-android-lib:1.8.1'
    //    compile 'com.dx168.patchsdk:patchsdk:1.2.2'
    compile project(':patchsdk')

    compile "com.android.support:multidex:1.0.1"
}

apply from: "$projectDir/patch.gradle"

